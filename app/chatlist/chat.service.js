"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var Observable_1 = require("rxjs/Observable");
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var Subject_1 = require("rxjs/Subject");
require("rxjs/add/operator/share");
var chat_model_1 = require("./chat.model");
var services_1 = require("../services");
var ChatService = (function () {
    function ChatService(ngZone) {
        this.ngZone = ngZone;
        this._chatlist = [];
        this._chatlistobservable = new BehaviorSubject_1.BehaviorSubject([]);
        this._chatlistoUpdate = new Subject_1.Subject();
    }
    ChatService.prototype.cleanemail = function (email) {
        var charactercount = email.length;
        var cleanedstring = "";
        var i;
        for (i = 0; i < charactercount; i++) {
            if (email.charAt(i) == ".")
                continue;
            cleanedstring += email.charAt(i);
        }
        return cleanedstring;
    };
    ChatService.prototype.getsessionid = function (emailid1, emailid2) {
        emailid1 = this.cleanemail(emailid1);
        emailid2 = this.cleanemail(emailid2);
        var sessionpath = emailid1 < emailid2 ? emailid1 + emailid2 : emailid2 + emailid1;
        return sessionpath;
    };
    ChatService.prototype.savemessage = function (from, to, message) {
        console.log('saving message from ' + from + ' To ' + to);
        var sessionid = this.getsessionid(from, to);
        var path = "/Messages/" + sessionid;
        var msgstatus = chat_model_1.MessageStatus.Pending;
        return firebase.push(path, { "sessionid": sessionid, "sentby": from, "recievedby": to, "message": message, "msgstatus": msgstatus, "datetime": 0 - Date.now(), updateTs: firebase.ServerValue.TIMESTAMP }).then(function (result) {
            console.log('message saved ' + JSON.stringify(result));
            return JSON.stringify(result);
        }, function (errorMessage) {
            console.log(errorMessage);
        });
    };
    ChatService.prototype.getchatListBetween = function (user1, user2) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var sessionid = _this.getsessionid(user1, user2);
            var path = "/Messages/" + sessionid;
            var onValueEvent = function (snapshot) {
                _this.ngZone.run(function () {
                    var results = _this.handleChatSnapshot(snapshot.value);
                    observer.next(results);
                });
            };
            firebase.addValueEventListener(onValueEvent, "" + path);
        }).share();
    };
    ChatService.prototype.handleChatSnapshot = function (data) {
        this._chatlist = [];
        if (data) {
            for (var id in data) {
                var result = Object.assign({ id: id }, data[id]);
                this._chatlist.push(result);
            }
            this._chatlist.sort(function (a, b) {
                if (a.datetime > b.datetime)
                    return -1;
                if (a.datetime < b.datetime)
                    return 1;
                return 0;
            });
            this._chatlistobservable.next(this._chatlist.slice());
        }
        return this._chatlist;
    };
    ChatService.prototype.filterUnread = function (email, chatlist) {
        return chatlist.filter(function (chat) { return (chat.recievedby == email && chat.msgstatus == chat_model_1.MessageStatus.RecievedAtServer); });
    };
    ChatService.prototype.markmessagesasread = function (chatlist) {
        console.log("chat list count: " + chatlist.length);
        var chatid;
        var recievedAtServer = chat_model_1.MessageStatus.RecievedAtServer;
        console.log("status: " + recievedAtServer);
        var containerobserv;
        var unreadchatlist = chatlist.filter(function (chat) { return (chat.recievedby == services_1.BackendService.email && chat.msgstatus == recievedAtServer); });
        console.log("Filetered chat list count: " + unreadchatlist.length);
        var updateobj = {};
        for (chatid in unreadchatlist) {
            var chat = chatlist[chatid];
            var path = "/Messages/" + chat.sessionid + "/" + chat.id + "/msgstatus";
            updateobj[path] = chat_model_1.MessageStatus.DeliveredToPhone;
        }
        return firebase.update('', updateobj).then(function (res) {
            return "Record Saved In Firebase";
        }).catch(function (errorMessage) {
            console.log(errorMessage);
        });
    };
    ChatService.prototype.updatemessagestatus = function (chat) {
        var recievedAtServer = chat_model_1.MessageStatus.RecievedAtServer;
        console.log("status: " + recievedAtServer);
        var updateobj = {};
        var path = "/Messages/" + chat.sessionid + "/" + chat.id + "/msgstatus";
        console.log("Path To Doc " + path);
        updateobj[path] = chat_model_1.MessageStatus.DeliveredToPhone;
        return firebase.update('', updateobj).then(function (res) {
            return "Record Saved In Firebase";
        }).catch(function (errorMessage) {
            console.log(errorMessage);
        });
    };
    ChatService.prototype.getunreadmessages = function (deviceowner, remoteuser) {
        var _this = this;
        var sessionid = this.getsessionid(deviceowner, remoteuser);
        var path = "/Messages/" + sessionid;
        var onQueryEvent = function (result) {
            if (!result.error && result.value) {
                console.log("Event type: " + result.type);
                console.log("Key: " + result.key);
                console.log("Value: " + JSON.stringify(result.value));
                var chat = result.value;
                if (chat.recievedby == deviceowner && chat.msgstatus == chat_model_1.MessageStatus.RecievedAtServer) {
                    console.log("Message Fired: " + chat.message);
                    _this._chatlistoUpdate.next(chat);
                }
            }
        };
        return firebase.query(onQueryEvent, path, {
            singleEvent: false,
            orderBy: {
                type: firebase.QueryOrderByType.KEY
            },
        }).then(function (result) {
            return result;
        });
    };
    ChatService.prototype.getchatListBetween1 = function (deviceowner, remoteuser) {
        var _this = this;
        return new Observable_1.Observable(function (observer) {
            var sessionid = _this.getsessionid(deviceowner, remoteuser);
            var path = "/Messages/" + sessionid;
            var onQueryEvent = function (result) {
                if (!result.error && result.value) {
                    console.log("Event type: " + result.type);
                    console.log("Key: " + result.key);
                    console.log("Value: " + JSON.stringify(result.value));
                    var chat = result.value;
                    if (chat.recievedby == deviceowner && chat.msgstatus == chat_model_1.MessageStatus.RecievedAtServer) {
                        console.log("Message Fired: " + chat.message);
                        _this.ngZone.run(function () {
                            observer.next(chat);
                        });
                    }
                }
            };
            firebase.query(onQueryEvent, path, {
                singleEvent: false,
                orderBy: {
                    type: firebase.QueryOrderByType.KEY
                },
            }).then(function (result) {
            });
        }).share();
    };
    return ChatService;
}());
ChatService = __decorate([
    core_1.Injectable(),
    __metadata("design:paramtypes", [core_1.NgZone])
], ChatService);
exports.ChatService = ChatService;
//# sourceMappingURL=data:application/json;base64,