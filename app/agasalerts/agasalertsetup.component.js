"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var services_1 = require("../services");
var agasalert_service_1 = require("./agasalert.service");
var app_globals_1 = require("../app.globals");
var AGASAlertSetupComponent = (function () {
    function AGASAlertSetupComponent(agasalertService, router) {
        this.agasalertService = agasalertService;
        this.router = router;
        this.limit = 0;
    }
    AGASAlertSetupComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.alerttypedd = this.alerttypedd_ElementRef.nativeElement;
        this.balancesheetcodesdd = this.balancesheetcodesdd_ElementRef.nativeElement;
        this.cashflowcodesdd = this.cashflowcodesdd_ElementRef.nativeElement;
        this.financialperformancecodesdd = this.financialperformancecodesdd_ElementRef.nativeElement;
        this.alertequestlist$ = this.agasalertService.getAlertRequestList(services_1.BackendService.email);
        this.agasalertService.getAGASAlertTypeList().subscribe(function (res) {
            _this.alertTypeList = [];
            for (var id in res) {
                var result = Object.assign({ id: id }, res[id]);
                _this.alertTypeList.push({ ValueMember: result.name, DisplayMember: result.name });
            }
            _this.alertTypeValueList = new app_globals_1.ValueList(_this.alertTypeList);
            _this.alerttypedd.items = _this.alertTypeValueList;
            _this.alerttypedd.selectedIndex = 0;
            _this.selectedalertTypeId = _this.alertTypeValueList.getValue(0);
            _this.selectedalertTypedescr = _this.alertTypeValueList.getText(0);
            ;
        });
        this.agasalertService.getBalanceSheetCodesList().subscribe(function (res) {
            _this.balancesheetcodesList = [];
            for (var id in res) {
                var result = Object.assign({ id: id }, res[id]);
                _this.balancesheetcodesList.push({ ValueMember: result.code, DisplayMember: result.description });
            }
            _this.balancesheetcodesValueList = new app_globals_1.ValueList(_this.balancesheetcodesList);
            _this.balancesheetcodesdd.items = _this.balancesheetcodesValueList;
            _this.balancesheetcodesdd.selectedIndex = 0;
            _this.selectedbalancesheetcode = _this.balancesheetcodesValueList.getValue(0);
            _this.selectedbalancesheetcodedescr = _this.balancesheetcodesValueList.getText(0);
            ;
        });
        this.agasalertService.getCashFlowStatementCodesList().subscribe(function (res) {
            _this.cashflowcodesList = [];
            for (var id in res) {
                var result = Object.assign({ id: id }, res[id]);
                _this.cashflowcodesList.push({ ValueMember: result.code, DisplayMember: result.description });
            }
            _this.cashflowcodesValueList = new app_globals_1.ValueList(_this.cashflowcodesList);
            _this.cashflowcodesdd.items = _this.cashflowcodesValueList;
            _this.cashflowcodesdd.selectedIndex = 0;
            _this.selectedcashflowcode = _this.cashflowcodesValueList.getValue(0);
            _this.selectedcashflowcodedescr = _this.cashflowcodesValueList.getText(0);
            ;
        });
        this.agasalertService.getFinancialPerformanceCodesList().subscribe(function (res) {
            _this.financialperformancecodesList = [];
            for (var id in res) {
                var result = Object.assign({ id: id }, res[id]);
                _this.financialperformancecodesList.push({ ValueMember: result.code, DisplayMember: result.description });
            }
            _this.financialperformancecodesValueList = new app_globals_1.ValueList(_this.financialperformancecodesList);
            _this.financialperformancecodesdd.items = _this.financialperformancecodesValueList;
            _this.financialperformancecodesdd.selectedIndex = 0;
            _this.selectedfinancialperformancecode = _this.financialperformancecodesValueList.getValue(0);
            _this.selectedfinancialperformancecodedescr = _this.financialperformancecodesValueList.getText(0);
            ;
        });
    };
    AGASAlertSetupComponent.prototype.ExpenditureItemLimitExceeded = function () {
        var requestinfo = { "name": this.selectedalertTypeId, "code": this.selectedfinancialperformancecode, "limit": this.limit, "requiredparam": this.selectedfinancialperformancecodedescr + " @ " + this.limit + " Limit" };
        var loginfo = { "name": this.selectedalertTypedescr, "requiredparam": this.selectedfinancialperformancecodedescr + " @ " + this.limit + " Limit" };
        this.agasalertService.createAlertRequest(requestinfo, loginfo, services_1.BackendService.email)
            .then(function (res) {
            alert("Record Saved Successfully");
        })
            .catch(function (err) {
            alert("An error occurred while creating Search Request.");
        });
    };
    AGASAlertSetupComponent.prototype.TotalExpenditureBudgetExceeded = function () {
        var requestinfo = { "name": this.selectedalertTypeId, "requiredparam": "None" };
        var loginfo = { "name": this.selectedalertTypedescr, "requiredparam": "None" };
        this.agasalertService.createAlertRequest(requestinfo, loginfo, services_1.BackendService.email)
            .then(function (res) {
            alert("Record Saved Successfully");
        })
            .catch(function (err) {
            alert("An error occurred while creating Search Request.");
        });
    };
    AGASAlertSetupComponent.prototype.cretaterequest = function () {
        console.log("Selected " + this.selectedalertTypeId);
        eval("this." + this.selectedalertTypeId + "()");
    };
    AGASAlertSetupComponent.prototype.alertTypeDDonchange = function (args) {
        this.selectedalertTypeId = this.alertTypeValueList.getValue(args.newIndex);
        this.selectedalertTypedescr = this.alertTypeValueList.getText(args.newIndex);
        ;
    };
    AGASAlertSetupComponent.prototype.cashflowcodesDDonchange = function (args) {
        this.selectedcashflowcode = this.cashflowcodesValueList.getValue(args.newIndex);
        this.selectedcashflowcodedescr = this.cashflowcodesValueList.getText(args.newIndex);
        ;
    };
    AGASAlertSetupComponent.prototype.balancesheetcodesDDonchange = function (args) {
        this.selectedbalancesheetcode = this.balancesheetcodesValueList.getValue(args.newIndex);
        this.selectedbalancesheetcodedescr = this.balancesheetcodesValueList.getText(args.newIndex);
        ;
    };
    AGASAlertSetupComponent.prototype.financialperformancecodesDDonchange = function (args) {
        this.selectedfinancialperformancecode = this.financialperformancecodesValueList.getValue(args.newIndex);
        this.selectedfinancialperformancecodedescr = this.financialperformancecodesValueList.getText(args.newIndex);
        ;
    };
    AGASAlertSetupComponent.prototype.ddopen = function () {
    };
    AGASAlertSetupComponent.prototype.gotoback = function () {
        this.router.navigate(["/finagg-search"]);
    };
    AGASAlertSetupComponent.prototype.viewDetail = function (selecteditem) {
        var navigationExtras = {
            queryParams: {
                "name": selecteditem.name,
                "requiredparam": selecteditem.requiredparam,
                "logtime": selecteditem.logtime,
                "requestid": selecteditem.requestid
            }
        };
        this.router.navigate(["agasalerthtml-view"], navigationExtras);
    };
    return AGASAlertSetupComponent;
}());
__decorate([
    core_1.ViewChild("alerttypedd"),
    __metadata("design:type", core_1.ElementRef)
], AGASAlertSetupComponent.prototype, "alerttypedd_ElementRef", void 0);
__decorate([
    core_1.ViewChild("balancesheetcodesdd"),
    __metadata("design:type", core_1.ElementRef)
], AGASAlertSetupComponent.prototype, "balancesheetcodesdd_ElementRef", void 0);
__decorate([
    core_1.ViewChild("cashflowcodesdd"),
    __metadata("design:type", core_1.ElementRef)
], AGASAlertSetupComponent.prototype, "cashflowcodesdd_ElementRef", void 0);
__decorate([
    core_1.ViewChild("financialperformancecodesdd"),
    __metadata("design:type", core_1.ElementRef)
], AGASAlertSetupComponent.prototype, "financialperformancecodesdd_ElementRef", void 0);
AGASAlertSetupComponent = __decorate([
    core_1.Component({
        moduleId: module.id,
        selector: "finaggsearchdisplay",
        templateUrl: "agasalertsetup.html"
    }),
    __metadata("design:paramtypes", [agasalert_service_1.AGASAlertService,
        router_1.Router])
], AGASAlertSetupComponent);
exports.AGASAlertSetupComponent = AGASAlertSetupComponent;
//# sourceMappingURL=data:application/json;base64,